// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace ConsoleApplication.Messages {
  public static partial class UserService
  {
    static readonly string __ServiceName = "UserService";

    static readonly Marshaller<global::ConsoleApplication.Messages.GetByUserIdRequest> __Marshaller_GetByUserIdRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ConsoleApplication.Messages.GetByUserIdRequest.Parser.ParseFrom);
    static readonly Marshaller<global::ConsoleApplication.Messages.UserResponse> __Marshaller_UserResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ConsoleApplication.Messages.UserResponse.Parser.ParseFrom);
    static readonly Marshaller<global::ConsoleApplication.Messages.GetAllRequest> __Marshaller_GetAllRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ConsoleApplication.Messages.GetAllRequest.Parser.ParseFrom);
    static readonly Marshaller<global::ConsoleApplication.Messages.UserRequest> __Marshaller_UserRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ConsoleApplication.Messages.UserRequest.Parser.ParseFrom);
    static readonly Marshaller<global::ConsoleApplication.Messages.AddImageRequest> __Marshaller_AddImageRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ConsoleApplication.Messages.AddImageRequest.Parser.ParseFrom);
    static readonly Marshaller<global::ConsoleApplication.Messages.AddImageResponse> __Marshaller_AddImageResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ConsoleApplication.Messages.AddImageResponse.Parser.ParseFrom);

    static readonly Method<global::ConsoleApplication.Messages.GetByUserIdRequest, global::ConsoleApplication.Messages.UserResponse> __Method_GetByUserId = new Method<global::ConsoleApplication.Messages.GetByUserIdRequest, global::ConsoleApplication.Messages.UserResponse>(
        MethodType.Unary,
        __ServiceName,
        "GetByUserId",
        __Marshaller_GetByUserIdRequest,
        __Marshaller_UserResponse);

    static readonly Method<global::ConsoleApplication.Messages.GetAllRequest, global::ConsoleApplication.Messages.UserResponse> __Method_GetAll = new Method<global::ConsoleApplication.Messages.GetAllRequest, global::ConsoleApplication.Messages.UserResponse>(
        MethodType.ServerStreaming,
        __ServiceName,
        "GetAll",
        __Marshaller_GetAllRequest,
        __Marshaller_UserResponse);

    static readonly Method<global::ConsoleApplication.Messages.UserRequest, global::ConsoleApplication.Messages.UserResponse> __Method_Save = new Method<global::ConsoleApplication.Messages.UserRequest, global::ConsoleApplication.Messages.UserResponse>(
        MethodType.Unary,
        __ServiceName,
        "Save",
        __Marshaller_UserRequest,
        __Marshaller_UserResponse);

    static readonly Method<global::ConsoleApplication.Messages.UserRequest, global::ConsoleApplication.Messages.UserResponse> __Method_SaveAll = new Method<global::ConsoleApplication.Messages.UserRequest, global::ConsoleApplication.Messages.UserResponse>(
        MethodType.DuplexStreaming,
        __ServiceName,
        "SaveAll",
        __Marshaller_UserRequest,
        __Marshaller_UserResponse);

    static readonly Method<global::ConsoleApplication.Messages.AddImageRequest, global::ConsoleApplication.Messages.AddImageResponse> __Method_AddImage = new Method<global::ConsoleApplication.Messages.AddImageRequest, global::ConsoleApplication.Messages.AddImageResponse>(
        MethodType.ClientStreaming,
        __ServiceName,
        "AddImage",
        __Marshaller_AddImageRequest,
        __Marshaller_AddImageResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ConsoleApplication.Messages.MessagesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of UserService</summary>
    public abstract partial class UserServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::ConsoleApplication.Messages.UserResponse> GetByUserId(global::ConsoleApplication.Messages.GetByUserIdRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetAll(global::ConsoleApplication.Messages.GetAllRequest request, IServerStreamWriter<global::ConsoleApplication.Messages.UserResponse> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ConsoleApplication.Messages.UserResponse> Save(global::ConsoleApplication.Messages.UserRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SaveAll(IAsyncStreamReader<global::ConsoleApplication.Messages.UserRequest> requestStream, IServerStreamWriter<global::ConsoleApplication.Messages.UserResponse> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ConsoleApplication.Messages.AddImageResponse> AddImage(IAsyncStreamReader<global::ConsoleApplication.Messages.AddImageRequest> requestStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for UserService</summary>
    public partial class UserServiceClient : ClientBase<UserServiceClient>
    {
      /// <summary>Creates a new client for UserService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UserServiceClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for UserService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UserServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UserServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UserServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::ConsoleApplication.Messages.UserResponse GetByUserId(global::ConsoleApplication.Messages.GetByUserIdRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetByUserId(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ConsoleApplication.Messages.UserResponse GetByUserId(global::ConsoleApplication.Messages.GetByUserIdRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetByUserId, null, options, request);
      }
      public virtual AsyncUnaryCall<global::ConsoleApplication.Messages.UserResponse> GetByUserIdAsync(global::ConsoleApplication.Messages.GetByUserIdRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetByUserIdAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::ConsoleApplication.Messages.UserResponse> GetByUserIdAsync(global::ConsoleApplication.Messages.GetByUserIdRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetByUserId, null, options, request);
      }
      public virtual AsyncServerStreamingCall<global::ConsoleApplication.Messages.UserResponse> GetAll(global::ConsoleApplication.Messages.GetAllRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetAll(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncServerStreamingCall<global::ConsoleApplication.Messages.UserResponse> GetAll(global::ConsoleApplication.Messages.GetAllRequest request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetAll, null, options, request);
      }
      public virtual global::ConsoleApplication.Messages.UserResponse Save(global::ConsoleApplication.Messages.UserRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Save(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ConsoleApplication.Messages.UserResponse Save(global::ConsoleApplication.Messages.UserRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Save, null, options, request);
      }
      public virtual AsyncUnaryCall<global::ConsoleApplication.Messages.UserResponse> SaveAsync(global::ConsoleApplication.Messages.UserRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SaveAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::ConsoleApplication.Messages.UserResponse> SaveAsync(global::ConsoleApplication.Messages.UserRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Save, null, options, request);
      }
      public virtual AsyncDuplexStreamingCall<global::ConsoleApplication.Messages.UserRequest, global::ConsoleApplication.Messages.UserResponse> SaveAll(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SaveAll(new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncDuplexStreamingCall<global::ConsoleApplication.Messages.UserRequest, global::ConsoleApplication.Messages.UserResponse> SaveAll(CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_SaveAll, null, options);
      }
      public virtual AsyncClientStreamingCall<global::ConsoleApplication.Messages.AddImageRequest, global::ConsoleApplication.Messages.AddImageResponse> AddImage(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddImage(new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncClientStreamingCall<global::ConsoleApplication.Messages.AddImageRequest, global::ConsoleApplication.Messages.AddImageResponse> AddImage(CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_AddImage, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override UserServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UserServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static ServerServiceDefinition BindService(UserServiceBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetByUserId, serviceImpl.GetByUserId)
          .AddMethod(__Method_GetAll, serviceImpl.GetAll)
          .AddMethod(__Method_Save, serviceImpl.Save)
          .AddMethod(__Method_SaveAll, serviceImpl.SaveAll)
          .AddMethod(__Method_AddImage, serviceImpl.AddImage).Build();
    }

  }
}
#endregion
